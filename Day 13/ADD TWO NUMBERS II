https://leetcode.com/problems/add-two-numbers-ii/description/
Soluton:/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode* l){
        ListNode* prev =NULL;
        ListNode* curr = l;
        while(curr){
            // first store the next before removing it
            ListNode* nextNode = curr->next;
            curr->next =prev;
            prev=curr;
            curr=nextNode;
        }
        return prev;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode* rl1 = reverse(l1);
        ListNode* rl2 = reverse(l2);

        // As in this question we have to form a new list so create on love
        ListNode* dummyhead = new ListNode(0);
        ListNode* tail = dummyhead;
        int carry =0;
        while(rl1!=NULL || rl2 !=NULL || carry !=NULL){
            int digit1 = (rl1!=NULL)?rl1->val:0;
            int digit2 = (rl2!=NULL)?rl2->val:0;
            int sum = digit1 +digit2 +carry;
            int digit =sum%10;
            carry =sum/10;;

            ListNode* newNode = new ListNode(digit);
            tail->next=newNode;
            tail=tail->next;
            // tail = newNode;
            // now traverse the lists
            rl1 = (rl1!=NULL)?rl1->next:NULL;
            rl2 = (rl2!=NULL)?rl2->next:NULL;
        }
       
        ListNode* result = reverse(dummyhead->next);
        delete(dummyhead);
    return result;
    }
};
