Used two mapds here : herre is detailed explanation and alsoremember the diff b/w count and find()
Problem link:https://leetcode.com/problems/word-pattern/
class Solution {
public:
    bool wordPattern(string pattern, string s) {
        // intution is to map pattern to s and s to pattern and check their mappings are in order
        unordered_map<char,string>mp1;
        unordered_map<string,char>mp2;
        int i =0,j=0;
        // now we make a string and forn first string inngiven string untill we found space and j++ sto omit that space
        // this is a nice way co u wont be given vector<vector<str>>
        while(i<pattern.size()&&j<s.size()){
            string str;
            while(j<s.size() && s[j]!=' '){
                    str+=s[j];
                    j++;
            }
            j++;
//             The code checks if the character pattern[i] already exists in mp.
// If it does, it compares the existing mapping (mp[pattern[i]]) with the current word (str). If they are not equal, the function returns false.
// It then checks if the word str already exists in mp2.
// If it does, it compares the existing mapping (mp2[str]) with the current character (pattern[i]). If they are not equal, the function returns false.
            if(mp1.count(pattern[i])){
                if(mp1[pattern[i]]!=str)return false;
            }
            if(mp2.count(str)){
                if(mp2[str]!=pattern[i])return false;
            }
            
            mp2[str]=pattern[i];
            mp1[pattern[i]]=str;
            i++;
        }
        // Final Checks:

// After the main loop, the code checks if there are remaining characters in the string (j < s.length()). If there are, it means there are more words in the string than characters in the pattern, so the function returns false.
// It also checks if there are remaining characters in the pattern (i < pattern.length()). If there are, it means there are more characters in the pattern than words in the string, so the function returns false.
      if(j<s.length())return false;
       if(i<pattern.length())return false;
    //   return true;
        return true;
    }
};
