class Solution{
public:
TreeNode* deleteNode(TreeNode* root,int key){
    if(root==NULL)
        return NULL;
}
if(root->val ==key){
    return helper(root);
}
TreeNode* dummy = root;
while(!root){
    if(root->val>key){
        if(root->left !=NULL && root->left->val ==key){
            root->left = helper(root->left);
            break;
        }
        else{
            root=root->left;
        }
    }
    else{
        if(root->right !=NULL && root->right->val ==key){
            root->right = helper(root->right);
            break
        }
        else{
            root=root->right;
        }
    }

return dummy;
}
// 
// helper is the functoin whic connects the broke node it has 2 ways
TreeNode* helper(TreeNode* root){
    if(root->left ==NULL){
        return root->right;
    }
    else if(root->right ==NULL){
        return root->left;
    }
    TreeNode* rightChild = root->right;
    // find lastright from the leftsubtree of the target node
    TreeNode lastRight = findLastRight(root->left);
    // now connect the leftsub's lastright with target's right
    lastRight->right  = rightChild;
    return root->left;
}
TreeNode* findLastRight(TreeNode* root){
    if(root->right ==NULL){
        return root;
    }
    return findLastRight(root->right);}
};
