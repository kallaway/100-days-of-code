https://leetcode.com/problems/subarray-product-less-than-k/description/

BRUTE FORCE : optimised is below  this one
class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        int i=0;
        int j=0;
        int n = nums.size();
        int counter=0;
        int ans =1;
        while(i<n && j<n){
            if(ans*nums[j]<k){
                ans=ans*nums[j];
                if(j==n-1){
                    i++;
                    j=i;
                    ans=1;
                }
                else{
                    j++;
                }
                counter++;
            }
            else{
                ans=1;
                i++;
                j=i;
            }
        }
        return counter;
    }
};

OPTIMISED:
class Solution {
public:
    int numSubarrayProductLessThanK(vector<int>& nums, int k) {

        if (k <= 1) return 0;
int n = nums.size();
    int counter = 0;
    int prod = 1;
    int left = 0;

    for (int right = 0; right < n; right++) {
        prod *= nums[right];

        // Shrink the window from the left until the product is less than k
        while (prod >= k) {
            prod /= nums[left++];
        }

        // At each step, the subarrays ending at right form valid combinations
        counter += right - left + 1;
    }

    return counter;
    }
};
